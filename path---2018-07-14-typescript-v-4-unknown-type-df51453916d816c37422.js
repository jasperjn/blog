webpackJsonp([24170165603545],{454:function(n,s){n.exports={data:{site:{siteMetadata:{title:"jasperjn's blog",author:"jasperjn",disqus:"jasperjn"}},markdownRemark:{id:"/home/circleci/repo/content/_posts/2018-07-14-typescript-v4-unknown-type/index.md absPath of file >>> MarkdownRemark",html:'<p>TypeScript 3.0 RC 版本發布，新增了 <code class="language-text">unknown</code> 型別。<code class="language-text">unknown</code> 顧名思義就是不知道這個型別是什麼型別的型別（好繞口令）。 看似和現有的 <code class="language-text">any</code> 型別一樣，但卻又不盡相同。</p>\n<h2>any 型別</h2>\n<p>在了解 <code class="language-text">unknown</code> 型別前先來回顧現有的 <code class="language-text">any</code> 型別。any 型別可以是任何型別，任何變數只要宣告成 <code class="language-text">any</code> 型別，就會失去 TypeScript 型別檢查機制，使開發時期倒退到傳統 JavaScript 的動態型別。</p>\n<iframe src="https://codesandbox.io/embed/kkml74vmq7?module=%2Fsrc%2Findex.ts&view=split" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>\n<p>上面將 <code class="language-text">foo</code> 宣告成 <code class="language-text">any</code>，但實際上是數值型別。除了第一行可以正常執行，接下來幾行的程式碼在執行時期（runtime）會出錯。開發時期由於是 <code class="language-text">any</code> 型別，TypeScript 認為它可以是任何型別，因此是可以正常編譯的。為了要解決 <code class="language-text">any</code> 型別太過寬鬆，導致開發時期不容易偵錯，因此誕生了 <code class="language-text">unknown</code> 型別。</p>\n<h2>unknown 型別</h2>\n<p><code class="language-text">unknown</code> 型別可以想像成只能 <code class="language-text">set-only</code> 的 <code class="language-text">any</code> 型別。依樣可以指派任何型別的值給 <code class="language-text">unknown</code>，但要對 <code class="language-text">unknown</code> 型別操作時，必須轉成 <code class="language-text">unknown</code> 以外的型別，否則便會出錯。此外， <code class="language-text">unknown</code> 只能指派給同樣是 <code class="language-text">unknown</code> 型別或是 <code class="language-text">any</code> 型別，不像 <code class="language-text">any</code> 型別可以指派給 <code class="language-text">string</code>、<code class="language-text">number</code> 等任何型別。</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> foo<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar2<span class="token punctuation">:</span> unknown <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n\n<span class="token comment">// 下面*開發時期*每一行都會跳警告</span>\n<span class="token keyword">const</span> bar3<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// unknown 只能指派給 unknown</span>\n<span class="token keyword">const</span> bar4<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// unknown 只能指派給 unknown</span>\nfoo<span class="token punctuation">.</span>x<span class="token punctuation">.</span>prop<span class="token punctuation">;</span> <span class="token comment">// unknown 不能直接操作屬性、方法、建構式</span>\nfoo<span class="token punctuation">.</span>y<span class="token punctuation">.</span>prop<span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span>z<span class="token punctuation">.</span>prop<span class="token punctuation">;</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">upperCase</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\nfoo<span class="token template-string"><span class="token string">`hello world!`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">upperCase</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nfoo<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error! 即使目前實際型別是數字，仍不能直接對 unknown 操作</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  foo<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok. TypeScript 推斷是 number 型別</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  foo<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok. TypeScript 推斷是 string 型別</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> foo2 <span class="token operator">=</span> foo <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 強制轉型</span>\nfoo2<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok. 因為 foo2 現在被轉型成 string 型別</span></code></pre>\n      </div>\n<h2>總結</h2>\n<p>大部分情況下，<code class="language-text">unknown</code> 型別幾乎可以取代現有的 <code class="language-text">any</code> 型別，確保當下能斷定目前變數到底是什麼型別在對其進行操作，降低 <code class="language-text">any</code> 型別帶來的不確定性。</p>',frontmatter:{title:"TypeScript 3.0 全新 unknown 型別",date:"July 14, 2018",tags:["typescript"]}}},pathContext:{slug:"/2018/07/14/typescript-v4-unknown-type/",previous:{fields:{slug:"/2018/06/06/using-circle-ci-deploy-to-gh-pages/"},frontmatter:{title:"使用 Circle CI 自動部署到 Github Pages",tags:["circle ci","gatsby","github"]}},next:{fields:{slug:"/2018/07/23/flutter-learning-series-setup-environments/"},frontmatter:{title:"Flutter 學習筆記 - 0. 環境建置",tags:["flutter"]}}}}}});
//# sourceMappingURL=path---2018-07-14-typescript-v-4-unknown-type-df51453916d816c37422.js.map